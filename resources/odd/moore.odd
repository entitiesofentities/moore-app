<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Marianne More Archive</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="moore.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2024-05-06+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="moore" source="teipublisher.odd"> <elementSpec ident="pb" mode="change">
                    <model predicate="@facs" behaviour="webcomponent">
            <desc>Use the url from the facs attribute to link with image</desc>
            <param name="name" value="'pb-facs-link'"/>
            <param name="facs" value="'resources/images/notebooks/' || @facs"/>
            <param name="label" value="@n"/>
            <param name="emit" value="'transcription'"/>
        </model>
                    <model predicate="starts-with(@facs, 'iiif:')" behaviour="webcomponent">
            <desc>If facs attribute starts with iiif prefix, use the trailing part as a link to the IIIF image</desc>
            <param name="name" value="'pb-facs-link'"/>
            <param name="facs" value="replace(@facs, '^iiif:(.*)$', '$1')"/>
            <param name="label" value="'Page'"/>
            <param name="emit" value="'transcription'"/>
        </model>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'page'"/>
            <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
            <outputRendition xml:space="preserve">
            display: block; margin-left: 4pt; color: grey; float: right;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: '[Page ';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="unclear" mode="change">
                    <model behaviour="inline" cssClass="unclear">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gap" mode="change">
                    <model predicate="desc" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model predicate="@extent" behaviour="inline">
            <param name="content" value="for $x in 1 to xs:integer(number(@extent)) return '⍰'"/>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[...]';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="hi" mode="change">
                    <model behaviour="pass-through">
            <param name="classes" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[classes]]">[[content]]</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="@target" behaviour="note">
            <param name="label" value="'g'"/>
        </model>
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="'n'"/>
        </model>
                </elementSpec>
                <elementSpec ident="l" mode="change">
                    <model predicate="not(node())" behaviour="break">
            <desc>Create line break for empty lines</desc>
            <param name="type" value="'line'"/>
        </model>
                    <model predicate="@rend" behaviour="block" cssClass="line" useSourceRendition="true">
            <param name="genres" value="ext-html:display-genres(@rend, $parameters?root/ancestor::text)"/>
            <param name="content" value="for $x in ./node() return if (contains(path($x), 'text()')) then ext-html:replaces-spaces($x) else if (contains(path($x), 'comment()')) then () else $x"/>
            <pb:template xmlns="" xml:space="preserve"><span class="genre">[[genres]]</span><span>[[content]]</span></pb:template>
        </model>
                    <model behaviour="block" cssClass="line">
            <param name="content" value="for $x in ./node() return if (contains(path($x), 'text()')) then ext-html:replaces-spaces($x) else if (contains(path($x), 'comment()')) then () else $x"/>
            <pb:template xmlns="" xml:space="preserve"><span class="genre"/><span>[[content]]</span></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="bibl" mode="change">
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="quote" mode="change">
                    <model behaviour="omit" useSourceRendition="true">
            <outputRendition xml:space="preserve" scope="before">
            content: '‘';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '’';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lg" mode="change">
                    <model predicate="@type eq 'sideways'" behaviour="block">
            <outputRendition xml:space="preserve">
            writing-mode: sideways-lr;
            </outputRendition>
        </model>
                    <model predicate="@type eq 'vertical'" behaviour="block">
            <outputRendition xml:space="preserve">
            writing-mode: vertical-lr;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="div" mode="change">
                    <model predicate="lg[@type = ('vertical', 'sideways')]" behaviour="block">
            <outputRendition xml:space="preserve">
            display:flex;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="desc" mode="add">
                    <model behaviour="note">
            <param name="label" value="'d'"/>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>